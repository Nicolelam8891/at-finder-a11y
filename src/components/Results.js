import './Results.css'
import React, { useState, useEffect } from 'react';
import { useNavigate, Navigate, useLocation } from 'react-router-dom';
import TechList from './TechList';
import CommentSection from './CommentSection';
import { useQuery } from '@apollo/client';
import { LOAD_COMMENTS } from '../GraphQL/Queries';

function Results({ tech, category, currentUser }) {
  const [comments, setComments] = useState([]);
  const [showTechSection, setShowTechSection] = useState(true);
  const [commentLoading, setCommentLoading] = useState(false)
  const [activeFilter, setActiveFilter] = useState('tech');
  const { loading, error, data } = useQuery(LOAD_COMMENTS);
  const navigate = useNavigate();
  const location = useLocation();

    // console.log("DATA", data)

  useEffect(() => {
    document.title = 'AT Results - AI AT Ally';
  }, [])

  useEffect(() => {
    if (loading) {
      setCommentLoading(true);
      console.log("Loading...");
    }

    if (error) {
      console.log(`Error: ${error.message}`);
    }

    if (data) {
      // Check if data is available before accessing allCategoryComments
      setComments(data.allCategoryComments);
    }
  }, [loading, error, data]);


  const handleCommentSubmit = (commentData) => {
    setComments((prevComments) => [...prevComments, commentData]);
  };

  const handleToggleSection = (section) => {
    if (section === 'tech') {
      setShowTechSection(true);
      setActiveFilter('tech');
      navigate(`/results/suggested-at`);
      document.title = 'AT Results - AI AT Ally';
    } else if (section === 'comments') {
      setShowTechSection(false);
      setActiveFilter('comments');
      navigate(`/results/community-comments`);
      document.title = 'Community Comments - AI AT Ally';
    }
  };

  if (!tech || !comments) {
    return <Navigate to="/findmyat" />;
  }

  const renderChatMessage = location.pathname === '/results/suggested-at' && (
    <p className="chat-message">The following list of suggested assistive technologies were generated by ChatGPT.</p>
  );

  return (
    <div className='Results'>
      <div  className='results-cont'>
        <div className='results-headings'>
          <button onClick={() => handleToggleSection('tech')} className={activeFilter === 'tech' ? 'result-head active-filter' : 'result-head'}>Suggested AT</button>
          <button onClick={() => handleToggleSection('comments')}  className={activeFilter === 'comments' ? 'result-head active-filter' : 'result-head'}>Community Comments</button>
        </div>
        <div className='results-section'>
          {renderChatMessage}
          {showTechSection && (
              <TechList currentUser={currentUser} tech={tech} onCommentSubmit={handleCommentSubmit} category={category} />
          )}
          {!showTechSection && (
              <CommentSection comments={comments} category={category}/>
          )}
        </div>
      </div>
    </div>
  );
}

export default Results;


//eventually we will use params to make sure this page persists on reload, using index position for the tech param